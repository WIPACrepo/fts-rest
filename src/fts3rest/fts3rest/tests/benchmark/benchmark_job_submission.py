#!/usr/bin/env python

#   Copyright notice:
#   Copyright  Members of the EMI Collaboration, 2013.
#
#   See www.eu-emi.eu for details on the copyright holders
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

from datetime import datetime, timedelta
from optparse import OptionParser
from sqlalchemy.exc import SQLAlchemyError
import json
import sys

from MockedJobController import MockedJobController, request
from QueryCounter import QueryCounter
from util import *


def benchmark_submission(job_number, files_number, callgraph_output, auth_method='certificate'):
    job_controller = MockedJobController(auth_method)
    controller_method = job_controller.submit
    if callgraph_output:
        controller_method = ProfiledFunction(controller_method)

    duration = timedelta()
    for j in xrange(job_number):
        files = []
        for f in xrange(files_number):
            files.append({
                'sources': ["gsiftp://source.se/path/file.%d.%d" % (j, f)],
                'destinations': ["gsiftp://dest.se/path/file.%d.%d" % (j, f)]
            })
        request.method = 'PUT'
        request.body = json.dumps({'files': files})
        start = datetime.utcnow()
        controller_method()
        end = datetime.utcnow()
        duration += (end - start)

    if callgraph_output:
        controller_method.generate_callgraph(callgraph_output)

    duration_seconds = duration.seconds + (duration.microseconds / 1000000.0)
    return duration, float(job_number) / duration_seconds, float(files_number) / duration_seconds


def _user_confirms():
    log.warning("Are you sure? (Type Yes)")
    return sys.stdin.readline().strip().lower() == "yes"


if __name__ == "__main__":
    opt_parser = OptionParser()
    opt_parser.add_option("-d", "--database", dest="database",
                          default="sqlite:////tmp/fts3_benchmark.db",
                          help="Database connection string")
    opt_parser.add_option("-f", "--files", dest="files_number", type="int",
                          default=100,
                          help="Number of files to send in a single job")
    opt_parser.add_option("-j", "--jobs", dest="job_number", type="int",
                          default=1,
                          help="NUmber of jobs")
    opt_parser.add_option("--log-queries", dest="log_queries", action="store_true", default=False,
                          help="Enable verbose output of the queries generated by SqlAlchemy")
    opt_parser.add_option("--force", dest="force", action="store_true", default=False,
                          help="Forces the execution, skip the confirmation question")
    opt_parser.add_option("--callgraph", dest="callgraph", action="store_true", default=None,
                          help="Generated callgraph")
    opt_parser.add_option("--auth_method", dest="auth_method", default='certificate',
                          help="Specify the auth_method used, possible values are: [certificate, oauth2]")
    (opts, args) = opt_parser.parse_args()

    log = setup_logging(opts.log_queries)

    try:
        log.info("Starting benchmark with %d jobs of %d files each" % (opts.job_number, opts.files_number))
        log.warning("This will modify the database!")

        query_counter = QueryCounter()
        setup_database(opts.database, proxy=query_counter)

        if not opts.force and not _user_confirms():
            log.critical("Aborted!")
            sys.exit(1)
        elif opts.auth_method not in ['certificate', 'oauth2']:
            log.critical("Possible values for auth_method: [certificate, oauth2]")
            sys.exit(1)
        else:
            log.warning("--force specified, no confirmation required")

        total_time, jobs_per_sec, files_per_sec = benchmark_submission(opts.job_number, opts.files_number, opts.callgraph)

        log.info("Total time:       %s" % total_time)
        log.info("Jobs per second:  %.2f" % jobs_per_sec)
        log.info("Files per second: %.2f" % files_per_sec)
        log.info("Query count:")
        for query, count in query_counter:
            log.info("\t{0: <8}\t{1}".format(query, count))
    except SQLAlchemyError, e:
        log.error("SQLAlchemy error: " + str(e))
